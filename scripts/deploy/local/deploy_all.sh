#!/usr/bin/env bash

# Deploy all NFT canisters locally
set -e

# Function to check if a canister exists and is running
check_canister_running() {
    local canister_name=$1
    if dfx canister status "$canister_name" > /dev/null 2>&1; then
        return 0  # Canister is running
    else
        return 1  # Canister is not running or doesn't exist
    fi
}

echo "Starting local deployment of NFT canisters..."

# Check if local dfx network is running
if dfx ping local > /dev/null 2>&1; then
    echo "Local dfx network is already running - proceeding with deployment"
else
    echo "Starting local dfx network..."
    dfx start --background --clean
    sleep 5
fi

# Initialize, pull and deploy internet identity canister
echo "Initializing internet identity canister..."
dfx deps init
echo "Pulling internet identity canister..."
dfx deps pull
echo "Deploying internet identity canister..."
dfx deps deploy --network local internet_identity



# Check if storage canister is already running before deployment
if check_canister_running "storage"; then
    echo "Storage canister is already running, skipping deployment..."
else
    echo "Deploying storage canister..."
    ./scripts/build.sh ./src storage_canister
    # DID file is already generated by the build script, no need to call generate_did.sh
    dfx deploy --network local storage --argument "(variant { Init = record {
        test_mode = true;
        version = record {
         major = 0:nat32;
         minor = 0:nat32;
         patch = 0:nat32;
        };
        commit_hash = \"stagingcommit\";
        authorized_principals = vec { principal \"6i6da-t3dfv-vteyg-v5agl-tpgrm-63p4y-t5nmm-gi7nl-o72zu-jd3sc-7qe\" };
    }})" --mode reinstall
fi

# Deploy core NFT canister
if check_canister_running "core_nft"; then
    echo "Core NFT canister is already running, skipping deployment..."
else
    echo "Deploying core NFT canister..."
    dfx deploy --network local core_nft --argument "(variant { Init = record {
            symbol = \"NFT\";
            name = \"Local NFT Collection\";
            description = opt \"A local NFT collection for testing\";
            logo = null;
            supply_cap = null;
            tx_window = null;
            permitted_drift = null;
            default_take_value = null;
            max_canister_storage_threshold = null;
            max_take_value = null;
            max_query_batch_size = null;
            max_update_batch_size = null;
            max_memo_size = null;
            atomic_batch_transfers = null;
            collection_metadata = vec {};
            version = record {
                major = 1:nat32;
                minor = 1:nat32;
                patch = 1:nat32;
            };
            commit_hash = \"localdev\";
            test_mode = true;
            approval_init = record {
                max_approvals_per_token_or_collection = null;
                max_revoke_approvals = null;
            };
            permissions = record {
                user_permissions = vec {
                    record {
                        principal \"$(dfx identity get-principal --network local)\";
                        vec {
                            variant { UpdateMetadata };
                            variant { Minting };
                            variant { UpdateCollectionMetadata };
                            variant { UpdateUploads };
                            variant { ManageAuthorities };
                            variant { ReadUploads };
                        };
                    };
                };
            };
        }})" --mode reinstall --yes
fi

# Build remaining canisters (not storage, as it's handled above)
echo "Building remaining canisters..."
./scripts/build.sh

# Generate environment variables for UI
echo "Generating environment variables for UI..."
cat > ui/.env.local << EOF
REACT_APP_INTERNET_IDENTITY_CANISTER_ID=$(dfx canister id internet_identity --network local)
REACT_APP_CORE_NFT_CANISTER_ID=$(dfx canister id core_nft --network local)
REACT_APP_STORAGE_CANISTER_ID=$(dfx canister id storage --network local)
REACT_APP_DFX_NETWORK=local
REACT_APP_DFX_HOST=http://localhost:4943
EOF

echo "Deployment complete!"
echo "Internet Identity canister ID: $(dfx canister id internet_identity --network local)"
echo "Storage canister ID: $(dfx canister id storage --network local)"
echo "Core NFT canister ID: $(dfx canister id core_nft --network local)"
echo ""
echo "Environment variables generated in ui/.env.local"
echo "You can now use the CLI tool to mint NFTs:"
echo "cd cmdline && cargo run -- --network local --canister $(dfx canister id core_nft --network local) mint --owner $(dfx identity get-principal --network local) --interactive"
